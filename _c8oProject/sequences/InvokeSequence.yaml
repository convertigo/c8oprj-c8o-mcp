comment: Invokes a sequence through the internal requester API and returns its response payload.
↓invoke [steps.SimpleStep-1760700403001]:
  expression: |
    var InternalRequester = Packages.com.twinsoft.convertigo.engine.requesters.InternalRequester;
    var Parameter = Packages.com.twinsoft.convertigo.engine.enums.Parameter;
    var XMLUtils = Packages.com.twinsoft.convertigo.engine.util.XMLUtils;
    var HashMap = Packages.java.util.HashMap;
    var response;

    function toMessage(err) {
      if (!err) {
        return "Unknown error";
      }
      if (err.javaException) {
        var javaMessage = err.javaException.getMessage();
        return String(javaMessage != null ? javaMessage : err.javaException.toString());
      }
      if (err.message) {
        return String(err.message);
      }
      return String(err);
    }

    function appendRequestParameter(map, key, value) {
      if (!key || value === null || value === undefined) {
        return;
      }
      if (typeof value === 'object') {
        map.put(String(key), JSON.stringify(value));
      } else {
        map.put(String(key), String(value));
      }
    }

    var projectName = project != null ? String(project) : "";
    var sequenceName = sequence != null ? String(sequence) : "";
    var payloadText = payload != null ? String(payload) : "";
    var contextId = contextIdVar != null ? String(contextIdVar) : "";
    var removeContextFlag = removeContext != null ? String(removeContext) : "";

    try {
      if (!projectName) {
        throw new Packages.java.lang.IllegalArgumentException("Missing 'project' variable");
      }
      if (!sequenceName) {
        throw new Packages.java.lang.IllegalArgumentException("Missing 'sequence' variable");
      }

      var requestMap = new HashMap();
      requestMap.put(Parameter.Project.getName(), projectName);
      requestMap.put(Parameter.Sequence.getName(), sequenceName);
      if (contextId) {
        requestMap.put(Parameter.Context.getName(), contextId);
      }
      if (removeContextFlag) {
        requestMap.put(Parameter.RemoveContext.getName(), removeContextFlag);
      }

      if (payloadText) {
        try {
          var parsed = JSON.parse(payloadText);
          for (var key in parsed) {
            if (Object.prototype.hasOwnProperty.call(parsed, key)) {
              appendRequestParameter(requestMap, key, parsed[key]);
            }
          }
        } catch (parseError) {
          throw new Packages.java.lang.IllegalArgumentException("Invalid JSON payload: " + parseError.message);
        }
      }

      var requester = new InternalRequester(requestMap);
      var raw = requester.processRequest();
      var outputType = "unknown";
      var outputContent = null;
      var javaClass = "";

      if (raw === null) {
        outputType = "null";
      } else {
        javaClass = String(raw.getClass().getName());
        if (raw instanceof Packages.org.w3c.dom.Document) {
          outputType = "xml";
          outputContent = String(XMLUtils.prettyPrintDOM(raw));
        } else if (raw instanceof Packages.java.lang.String) {
          outputType = "text";
          outputContent = String(raw);
        } else {
          outputType = "object";
          outputContent = String(raw);
        }
      }

      var executionContext = requestMap.get("convertigo.context");
      var contextIdentifier = executionContext != null ? String(executionContext.contextID) : "";
      var contentType = requestMap.get("convertigo.contentType");
      var cookies = requestMap.get("convertigo.cookies");

      response = {
        status: "ok",
        project: projectName,
        sequence: sequenceName,
        contextId: contextIdentifier,
        contentType: contentType != null ? String(contentType) : "",
        cookies: cookies != null ? String(cookies) : "",
        output: {
          type: outputType,
          javaClass: javaClass,
          content: outputContent
        }
      };
    } catch (e) {
      response = {
        status: "error",
        project: projectName,
        sequence: sequenceName,
        message: toMessage(e)
      };
    }
↓result [steps.JsonToXmlStep-1760700403002]:
  jsonObject:
    - xmlizable:
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType:
        - ↑mode: JS
        - →→: response
  key:
    - xmlizable:
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType:
        - ↑mode: PLAIN
        - →→: response
↓project [variables.RequestableVariable-1760700403003]:
  comment: Name of the project hosting the sequence to invoke.
↓sequence [variables.RequestableVariable-1760700403004]:
  comment: Name of the sequence to invoke.
↓payload [variables.RequestableVariable-1760700403005]:
  comment: Optional JSON object serialized as a string that contains request parameters for the target sequence.
↓contextIdVar [variables.RequestableVariable-1760700403006]:
  comment: Optional existing Convertigo context identifier (__context) to reuse between calls.
↓removeContext [variables.RequestableVariable-1760700403007]:
  comment: Optional flag forwarded to __removeContext to control Convertigo context lifecycle.
