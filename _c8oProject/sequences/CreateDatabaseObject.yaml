comment: Create a new database object under a parent
↓Create [steps.SimpleStep-1760712703682]: 
  expression: |
    var ClassUtils = Packages.org.apache.commons.lang3.ClassUtils;
    var IContainerOrdered = Packages.com.twinsoft.convertigo.beans.core.IContainerOrdered;

    function parseJson(text, fallback) {
      if (text == null) {
        return fallback;
      }
      var s = String(text);
      if (s.length === 0) {
        return fallback;
      }
      try {
        return JSON.parse(s);
      } catch (e) {
        return fallback;
      }
    }

    function convertValue(type, value) {
      if (value === null || value === undefined) {
        return null;
      }
      var cls = type;
      if (cls.isPrimitive()) {
        cls = ClassUtils.primitiveToWrapper(cls);
      }
      var name = cls.getName();
      if (name === "java.lang.String") {
        return String(value);
      }
      if (name === "java.lang.Boolean") {
        return java.lang.Boolean.valueOf(String(value));
      }
      if (name === "java.lang.Integer") {
        return java.lang.Integer.valueOf(String(value));
      }
      if (name === "java.lang.Long") {
        return java.lang.Long.valueOf(String(value));
      }
      if (name === "java.lang.Double" || name === "java.lang.Float") {
        return java.lang.Double.valueOf(String(value));
      }
      if (cls.isEnum()) {
        return java.lang.Enum.valueOf(cls, String(value));
      }
      return String(value);
    }

    function applyProperties(dbo, properties) {
      if (!properties) {
        return [];
      }
      var updated = [];
      var beanInfo = Packages.java.beans.Introspector.getBeanInfo(dbo.getClass());
      var descriptors = beanInfo.getPropertyDescriptors();
      var descriptorMap = {};
      for (var i = 0; i < descriptors.length; i++) {
        descriptorMap[descriptors[i].getName()] = descriptors[i];
      }
      for (var key in properties) {
        if (!properties.hasOwnProperty(key)) {
          continue;
        }
        var descriptor = descriptorMap[key];
        if (!descriptor) {
          continue;
        }
        var setter = descriptor.getWriteMethod();
        if (setter == null) {
          continue;
        }
        var propertyType = descriptor.getPropertyType();
        var converted = convertValue(propertyType, properties[key]);
        try {
          setter.invoke(dbo, [converted]);
          updated.push(key);
        } catch (eSet) {
          updated.push(key + "<error>");
        }
      }
      if (updated.length > 0) {
        dbo.hasChanged = true;
      }
      return updated;
    }

    var data = parseJson(payload, {});
    var parentId = data.parent || data.parentQName;
    var className = data.className;
    if (!parentId) {
      throw new Error("Missing parent identifier");
    }
    if (!className) {
      throw new Error("Missing className");
    }
    var manager = Packages.com.twinsoft.convertigo.engine.Engine.theApp.databaseObjectsManager;
    var parent = manager.getDatabaseObjectByQName(String(parentId));
    if (parent == null) {
      throw new Error("Parent database object not found");
    }
    var clazz = java.lang.Class.forName(String(className));
    var dbo = clazz.getDeclaredConstructor().newInstance();
    dbo.bNew = true;
    if (data.name) {
      dbo.setName(String(data.name));
    }
    var updated = applyProperties(dbo, data.properties || {});
    var afterValue = null;
    if (data.after) {
      var afterObj = manager.getDatabaseObjectByQName(String(data.after));
      if (afterObj != null) {
        afterValue = java.lang.Long.valueOf(afterObj.priority);
      }
    }
    if (data.before && afterValue == null) {
      var beforeObj = manager.getDatabaseObjectByQName(String(data.before));
      if (beforeObj != null) {
        var previous = beforeObj.getPreviousSiblingInFolder();
        afterValue = previous == null ? java.lang.Long.valueOf(0) : java.lang.Long.valueOf(previous.priority);
      }
    }
    if (IContainerOrdered.class.isInstance(parent)) {
      parent.add(dbo, afterValue);
    } else {
      parent.add(dbo);
    }
    dbo.hasChanged = true;
    parent.hasChanged = true;
    var result = {
      qname: dbo.getFullQName(),
      name: dbo.getName(),
      className: className,
      updated: updated
    };
↓Json1 [steps.JsonToXmlStep-1760712703684]: 
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: result
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: created
↓payload [variables.RequestableVariable-1760712703680]: 
  comment: JSON payload with parent, className, optional name, properties, before/after
  wsdl: false
